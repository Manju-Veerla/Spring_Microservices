services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  message-broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: message-broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://message-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server=localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Database Services
  user-db:
    image: mysql:8.3.0
    container_name: user-db
    environment:
      MYSQL_DATABASE: user_db
      MYSQL_ROOT_PASSWORD: root
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - user-db-data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  department-db:
    image: mysql:8.3.0
    container_name: department-db
    environment:
      MYSQL_DATABASE: department_db
      MYSQL_ROOT_PASSWORD: root
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - dept-db-data:/var/lib/mysql
    ports:
      - "3308:3306"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    build:
      context: ./EurekaService
      dockerfile: Dockerfile
    image: eurekaservice:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl",  "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  api-gateway:
    build:
      context: ./APIGatewayService
      dockerfile: Dockerfile
    image: apigatewayservice:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_started
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/

    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  department-service:
    build:
      context: ./DepartmentService
      dockerfile: Dockerfile
    image: deptservice:latest
    container_name: department-service
    ports:
      - "9001:9001"
    depends_on:
      eureka-server:
        condition: service_started
      department-db:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://department-db:3306/department_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/actuator/health"]
      interval: 30s
      timeout: 10s

  auth-service:
    build:
      context: ./AuthenticationService
      dockerfile: Dockerfile
    image: authservice:latest
    container_name: auth-service
    ports:
      - "9003:9003"
    depends_on:
      eureka-server:
        condition: service_started
      user-service:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_APPLICATION_NAME=auth-service
      - AUTH_APP_JWT_SECRET=5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437
      - AUTH_APP_JWT_EXPIRATION_MS=3600000
      - USER_SERVICE_URL=http://user-service:9002
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9003/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    image: userservice:latest
    container_name: user-service
    ports:
      - "9002:9002"
    depends_on:
      eureka-server:
        condition: service_started
      user-db:
        condition: service_healthy
      message-broker:
        condition: service_started
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://user-db:3306/user_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  notification-service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    image: notificationservice:latest
    container_name: notification-service
    hostname: notification-service
    ports:
      - "9004:9004"
    depends_on:
      eureka-server:
        condition: service_started
      message-broker:
        condition: service_started
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl",  "-f", "http://localhost:9004/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  microservices-network:
    driver: bridge

volumes:
  user-db-data:
  dept-db-data:
